ーーーー提案レイアウトに関するユーザー実験ーーーー

目的：提案した新しいレイアウト手法がデータ構造の参照関係をどれだけ理解しやすいレイアウトにしているかを、
　　　既存のレイアウト手法と比較することによって提案手法の有用性を明らかにする。

方法：以下に示した（1）～（4）までの4つのテストを実施する。
　　　（1）～（3）までは同一のテストを異なるレイアウト図を用いて3回実施する。
　　　使用するレイアウト図は、
        ①一回目：提案レイアウト     二回目：既存レイアウト      三回目：提案レイアウト
        ②一回目：既存レイアウト     二回目：提案レイアウト      三回目：既存レイアウト
　　　のいずれかである。
　　　また（4）は提案レイアウトと既存レイアウトをそれぞれ交互に使用する。


（1）平衡二分木に関するテスト
    目的：新しく提案されたレイアウト法によりレイアウトされた図によって、使用者がデータ構造（二分木）の理解を素早く行うことができるかを確かめる
    手段：二分探索木内で順序が間違えて格納されているノードを見つけるまでにかかる時間を測定する
    
    【詳細】
    1.被験者には事前に以下のことを説明する
        ・平衡二分木のレイアウトに関するテストである。
        ・以下の条件を満たした平衡二分木を実装したい。
            ①各ノードには日本人の苗字と名前が格納されている
            ②全てのノードについて、左の子以下は自分の苗字よりも辞書順で前になるものであり、右の子以下は辞書順で後になるものである
            ③苗字が同じノードが複数あった場合は名前の辞書順に並べられる
        ・実装を行い、実際にあるクラスの名簿（男女合わせて11人）のデータをツリーに格納させ、Kanonによってレイアウトさせた。
        【詳細】
            ▼緑の矢印で指されているノード：根のノード
            ▼クラス名：NameTree
            ▼フィールド：
                ▽left：左の子ノードを指す
                ▽right：右の子ノードを指す
                ▽sei：ノードに格納された苗字
                ▽mei：ノードに格納された名前
        ・しかしこの実装には誤りがあったため、順序が間違えて格納されているノードが存在している。
        　誤った位置に存在しているノードの位置を、図からそれぞれ探してほしい。
            ①辞書順が乱れてしまっている箇所が１か所あるので、それを見つけたら指で指して伝える。また、「見つけた」と声でも宣言する。
    2.説明が終わった後で被験者に図を渡し、実際に間違いを見つけるまでの時間を測定する
        ・被験者には図（紙製）を裏返しで渡し、表にした時点から計測開始
        ・被験者が「見つけた」と宣言し、指摘した箇所が合っていたら測定終了
        　指摘した箇所が間違っていた場合はその旨を伝えてもう一度探してもらう
        （「見つけた」と宣言された時点で時計は止め、こちらが「もう一度探してください。」と言ったら時計を再スタートする）
        ・10分以内に見つけられなかった場合はその時点で測定終了とする


（2）トライ木（三分探索木）に関するテスト
    目的：新しく提案されたレイアウト法によりレイアウトされた図によって、使用者がデータ構造（n分木）の理解を素早く行うことができるかを確かめる
    手段：三分探索木内に格納されている英単語を羅列するまでにかかる時間を測定する

    【詳細】
    1.被験者には事前に以下のことを説明する
        ・三分探索木のレイアウトに関するテストである。
        ・以下の条件を満たした三分探索木を実装したい。
            ①各ノードには一つのアルファベットが格納されている
            ②各ノードは、
                ・その文字の代わりに、アルファベット順で前になる文字を指す左ノード
                ・その文字の代わりに、アルファベット順で後になる文字を指す右ノード
                ・その文字の次の文字を指す中央ノード
            　の子ノードを持つ
        ・三分探索木から格納されている文字列を取得するには次のような操作を行う
            ①根のノードから「子に中央ノードを持たないノード」まで辿り、その全ての経路上に格納されているアルファベットを羅列する。
            ②また、それぞれの経路について、アルファベット間に対応するエッジのフィールド名を書く。
            ③それぞれの経路に対して根から順に、leftエッジとrightエッジの出発点のアルファベットを消す。
        ・実装を行い、ある複数の英単語のデータをツリーに格納させ、Kanonによってレイアウトさせた。
        【詳細】
            ▼クラス名：Node
            ▼フィールド：
                ▽left：左の子ノードを指す
                ▽middle：中央の子ノードを指す
                ▽right：右の子ノードを指す
                ▽val：ノードに格納されたアルファベット
        ・このレイアウトされた図を見て、どのような英単語がツリーに格納されたのかを確かめるため、全ての格納された英単語を列挙してほしい。
    2.説明が終わった後で被験者に図を渡し、全ての単語を羅列するまでの時間を測定する
        ・被験者には図（紙製）を裏返しで渡し、表にした時点から計測開始
        ・被験者にはもう一枚の紙を渡し、ツリーに格納されている単語を書いていってもらう
        ・被験者が「全ての単語を書き切った」と宣言した時点で計測終了
        ・10分以内に見つけられなかった場合はその時点で測定終了とする
        ・一回目の実験のときに、被験者が羅列した単語が誤ったものであればこちらから正しい答えとその求め方を提示し、問題の主旨を理解してもらうようにする


（3）リストが格納されている二分木に関するテスト
    目的：新しく提案されたレイアウト法によりレイアウトされた図によって、使用者が複雑なデータ構造（入れ子構造）の理解を素早く行うことができるかを確かめる
    手段：リストが格納されている二分木で、最も長さの長いリストが格納されている二分木ノードを見つけるまでにかかる時間を測定する

    【詳細】
    1.被験者には事前に以下のことを説明する
        ・リストが格納された二分木に関するテストである。
        ・以下の条件を満たしたデータ構造を実装したい。
            ①全国にあるサーキットと、各サーキットでのタイム記録を管理したい
            ②リストノードにはあるサーキットでのタイム記録が格納されており、先頭からサーキット内でのタイムが早い順になっている
            ③二分木ノードにはサーキット固有のID番号が格納されており、二分探索木となっているのでサーキットの挿入・削除・検索が素早く行える
            ④二分木ノードからはそのサーキット内でのタイム記録を管理するリストノードの先頭を参照できる
        ・実装を行い、実際にいくつかのサーキットとタイム記録のデータを格納させ、Kanonによってレイアウトさせた。
        【詳細】
            ▼クラス名：
                ▽Circuit：サーキットを表す二分木ノード
                ▽Record：タイム記録を表すリストノード
            ▼Circuitの持つフィールド：
                ▽left：次のサーキットのノードを指す
                ▽right：前のサーキットのノードを指す
                ▽ID：サーキットのID番号
                ▽rcd：タイム記録の情報を格納したリストの先頭のノードを指す
            ▼Recordの持つフィールド
                ▽next：次のRecordノードを指す
                ▽time：タイム
        ・このレイアウトされた図を見て、どのサーキットが一番多くの記録（リストノード）を持っているかを探してほしい
            ①一番多くのリストノードを持つ二分木ノードを探し、それを見つけたら指で指して伝える。また、「見つけた」と声でも宣言する。
    2.説明が終わった後で被験者に図を渡し、実際に答えを見つけるまでの時間を測定する
        ・被験者には図（紙製）を裏返しで渡し、表にした時点から計測開始
        ・被験者が「見つけた」と宣言し、指摘した箇所が合っていたら測定終了
        　指摘した箇所が間違っていた場合はその旨を伝えてもう一度探してもらう
        （「見つけた」と宣言された時点で時計は止め、こちらが「もう一度探してください。」と言ったら時計を再スタートする）
        ・10分以内に見つけられなかった場合はその時点で測定終了とする
        ・一回目の実験のときにタイムアップした場合は、こちらから正しい答えとその求め方を提示し問題の主旨を理解してもらうようにする

//一番最初にやる
（4）様々な種類のデータ構造のメンタルマップに関するテスト
    目的：様々な種類のデータ構造について使用者が「最も理解しやすい」と思っているような構造を確認し、既存レイアウトや提案した新レイアウトと比較する
        　また、使用者が視認しているレイアウトと、視認してから「最も理解しやすい」と思う構造を想起するのにかかる時間の関係性を確認する
    手段：「インタープリタ内の変数環境を表したレイアウト」
        　「グラフノードを表したレイアウト」
        　「スキップリストを表したレイアウト」
        　「B+木を表したレイアウト」
        　の4つそれぞれを使用者に見てもらい、そこから「最も理解しやすい」と思う形を図示してもらう
        　また、図示までにかかる時間を計測する

    【詳細】
    1.被験者には事前に以下のことを説明する
        ・レイアウトされたデータ構造の図を見てもらい、「理解しやすい」と思う形に書き直してもらうテストである。
        ・「理解しやすい」形とは、第三者にそのデータ構造を説明するときに使用できるような形のことである。
            ※たとえば、自身が指導者として生徒にそのデータ構造を教えるときに書くような形である。
    2.説明が終わった後で被験者に図を渡し、実際に図を書いてもらう。またその時間を測定する
        ・被験者には図（紙製）を裏返しで渡し、表にした時点から計測開始
        ・被験者が「書き終えた」と宣言した時点で測定終了
        ・スキップリストの図に関してはグラフが大きいので、「全体の1/3だけ書けばよし」ということを被験者に伝える
        ・計測を開始して10分経ったら被験者に「10分経過した」とアナウンスをかける
        ・時間計測が終了した後、「なぜそのような形にレイアウトしたのか」を被験者にインタビューする
        //他のやつでもインタビューしてみる（どっちが良かったか（理由）、感想など、どうすればもっと良くなるか、（1）～（3）の全体の感想、タスクの難易度（図の読み取りと演繹にかかった時間の比率）、事前の知識の量3～4択くらい×データ構造の数だけ）




【インタビューについて】（口頭で行う）
・（1）～（3）について行う
    ①図の読み取りと与えられたタスクの理解・計算にかかった時間の比率
    ②事前に与えられたデータ構造について現時点で知っているか（3択）
        ・名前を知っており、構造を他人に説明することができる→①
        ・名前は知っているが、構造がどんなものであるかは現時点で知らない（他人に説明できない）→②
        ・名前も知らなかった→③
    ③既存レイアウトと提案レイアウトのどちらが良かったか
    ④その理由
    ⑤どうすればより分かりやすいレイアウトになると思うか
    ⑥その他感想など

    最後に、（1）～（4）を通して全体の感想を聞く