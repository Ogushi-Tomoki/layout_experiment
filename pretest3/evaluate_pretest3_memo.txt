※それぞれのテストについて、
　「original→ogushi→original」または「ogushi→original→ogushi」の順番で3回テストを行う

（1）平衡二分木に関するテスト（旧→新→旧で実施）
    1.被験者には事前に以下のことを説明する
        ・平衡二分木のレイアウトに関するテストである。
        ・以下の条件を満たした平衡二分木を実装したい。
            ①各ノードには日本人の苗字と名前が格納されている
            ②全てのノードについて、左の子以下は全て自分の苗字よりも辞書順で前になるものであり、右の子以下は全て辞書順で後になるものである
            ③苗字が同じノードが複数あった場合は名前の辞書順に並べられる
        ・実装を行い、実際にあるクラスの名簿（男女それぞれ30人ずつ）のデータをツリーに格納させ、Kanonによってレイアウトさせた。
        【詳細】
            ▼緑の矢印で指されているノード：根のノード
            ▼クラス名：NameTree
            ▼フィールド：
                ▽left：左の子ノードを指す
                ▽right：右の子ノードを指す
                ▽sei：ノードに格納された苗字
                ▽mei：ノードに格納された名前
        ・しかし、この実装には誤りがあったため一部の構造がおかしくなってしまっている。
        　その構造の誤りを、Kanonオリジナルのレイアウト手法と新たに考案したレイアウト手法で描いた2つの図からそれぞれ探してほしい。
            ①辞書順が乱れてしまっている箇所が１か所あるので、それを見つけたら指で指して伝える。また、「見つけた」と声でも宣言する。
    2.説明が終わった後で被験者に図を渡し、実際に間違いを見つけるまでの時間を測定する
        ・被験者には図（紙製）を裏返しで渡し、表にした時点から計測開始
        ・被験者が「見つけた」と宣言し、指摘した箇所が合っていたら測定終了
        　指摘した箇所が間違っていた場合はその旨を伝えてもう一度探してもらう
        （「見つけた」と宣言された時点で時計は止め、こちらが「もう一度探してください。」と言ったら時計を再スタートする）
        ・10分以内に見つけられなかった場合はその時点で測定終了とする
        ・一回目の実験のときに、被験者が羅列した単語が誤ったものであればこちらから正しい答えとその求め方を提示し、問題の主旨を理解してもらうようにする

    【実験の予想結果について】
        考案した手法のほうが計測時間が短くなる。
        ここから、「同じフィールドを表すエッジの角度を等しくすることでレイアウトは見やすくなる」ことが言える。


（2）トライ木（三分探索木）に関するテスト（新→旧→新で実施）
    1.被験者には事前に以下のことを説明する
        ・三分探索木のレイアウトに関するテストである。
        ・以下の条件を満たした三分探索木を実装したい。
            ①各ノードには一つのアルファベットが格納されている
            ②各ノードは、
                ・その文字の代わりに、より小さな文字を指す左ノード
                ・その文字の代わりに、より大きな文字を指す右ノード
                ・その文字の次の文字を指す中央ノード
            　の子ノードを持つ
        ・三分探索木から格納されている文字列を取得するには次のような操作を行う
            ①根のノードから「子に中央ノードを持たないノード」まで辿り、その全ての経路上に格納されているアルファベットを羅列する。
            ②また、それぞれの経路について、アルファベット間に対応するエッジのフィールド名を書く。
            ③それぞれの経路に対して根から順に、leftエッジとrightエッジの出発点のアルファベットを消す。
        ・実装を行い、ある複数の英単語のデータをツリーに格納させ、Kanonによってレイアウトさせた。
        【詳細】
            ▼クラス名：Node
            ▼フィールド：
                ▽left：左の子ノードを指す
                ▽middle：中央の子ノードを指す
                ▽right：右の子ノードを指す
                ▽val：ノードに格納されたアルファベット
        ・このレイアウトされた図を見て、どのような英単語がツリーに格納されたのかを確かめるため、全ての格納された英単語を列挙してほしい。
    2.説明が終わった後で被験者に図を渡し、全ての単語を羅列するまでの時間を測定する
        ・被験者には図（紙製）を裏返しで渡し、表にした時点から計測開始
        ・被験者にはもう一枚の紙を渡し、ツリーに格納されている単語を書いていってもらう
        ・被験者が「全ての単語を書き切った」と宣言した時点で計測終了
        ・10分以内に見つけられなかった場合はその時点で測定終了とする
        ・一回目の実験のときに、被験者が羅列した単語が誤ったものであればこちらから正しい答えとその求め方を提示し、問題の主旨を理解してもらうようにする

    【実験の予想結果について】
        考案した手法のほうが計測時間が短くなる。
        ここから、「リストや二分木以外のデータ構造（n分木）についてレイアウトは見やすくなる」ことが言える。


（3）リストが格納されている二分木に関するテスト（仮）
    1.被験者には事前に以下のことを説明する
        ・リストが格納された二分木に関するテストである。
        ・以下の条件を満たしたデータ構造を実装したい。
            ①全国にあるサーキットと、各サーキットでのタイム記録を管理したい
            ②リストノードにはあるサーキットでのタイム記録が格納されており、先頭からサーキット内でのタイムが早い順になっている
            ③二分木ノードにはサーキット固有のID番号が格納されており、二分探索木となっているのでサーキットの挿入・削除・検索が素早く行える
            ④二分木ノードからはそのサーキット内でのタイム記録を管理するリストノードの先頭を参照できる
        ・実装を行い、実際にいくつかのサーキットとタイム記録のデータを格納させ、Kanonによってレイアウトさせた。
        【詳細】
            ▼クラス名：
                ▽Circuit：サーキットを表す二分木ノード
                ▽Record：タイム記録を表すリストノード
            ▼Circuitの持つフィールド：
                ▽left：次のサーキットのノードを指す
                ▽right：前のサーキットのノードを指す
                ▽ID：サーキットのID番号
                ▽rcd：タイム記録の情報を格納したリストの先頭のノードを指す
            ▼Recordの持つフィールド
                ▽next：次のRecordノードを指す
                ▽time：タイム
        ・このレイアウトされた図を見て、どのサーキットが一番多くの記録（リストノード）を持っているかを探してほしい
            ①一番多くのリストノードを持つ二分木ノードを探し、それを見つけたら指で指して伝える。また、「見つけた」と声でも宣言する。
    2.説明が終わった後で被験者に図を渡し、実際に答えを見つけるまでの時間を測定する
        ・被験者には図（紙製）を裏返しで渡し、表にした時点から計測開始
        ・被験者が「見つけた」と宣言し、指摘した箇所が合っていたら測定終了
        　指摘した箇所が間違っていた場合はその旨を伝えてもう一度探してもらう
        （「見つけた」と宣言された時点で時計は止め、こちらが「もう一度探してください。」と言ったら時計を再スタートする）
        ・10分以内に見つけられなかった場合はその時点で測定終了とする
        ・一回目の実験のときにタイムアップした場合は、こちらから正しい答えとその求め方を提示し問題の主旨を理解してもらうようにする